GPT-Engineer Web UI Project Structure

Here's the complete structure of the enhanced GPT-Engineer Web UI project:

gpt-engineer-webui/
│
├── app.py                    # Main Flask application file
├── requirements.txt          # Python dependencies
├── .env                      # Environment configuration
├── .gitignore                # Git ignore file
├── app.log                   # Application log file
│
├── static/                   # Static assets
│   ├── css/
│   │   ├── bootstrap.min.css # Bootstrap framework
│   │   ├── custom.css        # Custom styling
│   │   └── highlight.min.css # Code syntax highlighting
│   │
│   ├── js/
│   │   ├── bootstrap.bundle.min.js # Bootstrap JavaScript
│   │   ├── jquery.min.js     # jQuery library
│   │   ├── datatables.min.js # DataTables plugin for tables
│   │   ├── highlight.min.js  # Code syntax highlighting
│   │   └── app.js           # Custom application JavaScript
│   │
│   └── img/
│       ├── logo.png          # Application logo
│       └── favicon.ico       # Favicon
│
├── templates/                # Jinja2 HTML templates
│   ├── base.html            # Base template with common elements
│   ├── index.html           # Home page (project list)
│   ├── login.html           # Login page
│   ├── register.html        # Registration page
│   ├── profile.html         # User profile page
│   ├── create_project.html  # Create new project page
│   ├── project_detail.html  # Project details page
│   ├── improve_project.html # Project improvement page
│   ├── search_results.html  # Search results page
│   ├── tag_projects.html    # Projects filtered by tag
│   ├── admin.html           # Admin panel
│   ├── admin_edit_user.html # Admin user edit page
│   └── error.html           # Error page
│
├── projects/                 # Project storage directory
│   └── [project_directories] # Individual project folders
│       ├── prompt            # Project prompt file
│       ├── workspace/        # Generated code
│       └── resources/        # Uploaded resources
│
├── uploads/                  # Temporary upload directory
├── temp/                     # Temporary files directory
├── backups/                  # Backup storage directory
│   └── backup_[timestamp].zip # Backup archives
│
├── templates/project_templates/ # Project templates
│   ├── flask_web_app/           # Flask web app template
│   │   ├── template_info.json   # Template metadata
│   │   └── [template_files]     # Template resource files
│   │
│   ├── react_app/              # React app template
│   │   ├── template_info.json  # Template metadata
│   │   └── [template_files]    # Template resource files
│   │
│   └── [other_templates]       # Additional templates
│
└── instance/                 # Flask instance folder
    └── gpte.db               # SQLite database file

Key Components
1. Core Application Files

    app.py: The main application file containing all routes, models, and business logic
    requirements.txt: Lists all Python package dependencies
    .env: Configuration file for environment variables
    app.log: Application log file for tracking events and errors

2. Database Models

The application uses SQLAlchemy with the following models (defined in app.py):

    User: Stores user information, credentials, and permissions
    Project: Manages project metadata, settings, and relationships
    JobHistory: Tracks execution history, metrics, and performance data

3. Template Structure

The templates directory contains all Jinja2 HTML templates:

    Base Templates:
        base.html: Core layout with navigation, header, and footer
        error.html: Error display page

    User Management:
        login.html: User login form
        register.html: New user registration
        profile.html: User profile and settings

    Project Management:
        index.html: Dashboard and project listing
        create_project.html: New project creation form
        project_detail.html: Detailed project view with files and status
        improve_project.html: Project improvement interface
        search_results.html: Project search results
        tag_projects.html: Projects filtered by tag

    Administration:
        admin.html: Admin dashboard and controls
        admin_edit_user.html: User editing interface for admins

4. Storage Directories

    projects/: Main storage for all GPT-Engineer projects
        Each project has its own directory with:
            prompt: Text file containing the project prompt
            workspace/: Generated code files
            resources/: User-uploaded reference files

    uploads/: Temporary storage for file uploads

    temp/: Temporary files created during processing

    backups/: Automated and manual backups of all projects

    templates/project_templates/: Reusable project templates to speed up creation

5. Static Assets

    CSS:
        Bootstrap framework for responsive design
        Custom styling for application-specific components
        Syntax highlighting styles for code display

    JavaScript:
        Bootstrap and jQuery for UI interactions
        DataTables for enhanced table functionality
        Code highlighting library
        Custom application logic

Application Features

    User Authentication System
        Registration, login, and profile management
        Role-based access control (admin/regular users)
        API key generation for programmatic access

    Project Management
        Creation with templates and resource uploading
        File browsing and editing
        Project improvement workflows
        Rating and tagging

    Job Processing
        Background execution of GPT-Engineer
        Status tracking and history
        Timeout and error handling

    Administration
        User management
        System monitoring
        Backup and maintenance tools
        Log viewing and management

    API Layer
        RESTful endpoints for all operations
        Batch processing capabilities
        Authentication with API keys

This structure provides a robust foundation for a multi-user, production-ready web interface for GPT-Engineer, allowing users to create, manage, and improve AI-generated coding projects through an intuitive UI.
